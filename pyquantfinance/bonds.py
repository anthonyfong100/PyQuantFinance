import numpy as np
import pandas as pd
from typing import Union
from .decorators import accepts
from .tvm import pv, _discount_table


class Bond:

    def __init__(self, maturity: int, principal: float,
                 coupon_rate: float, coupons_per_year: int):
        """
        Maturity refers to the duration till the bonds maturity, measured in number of years
        """
        self.maturity = maturity
        self.principal = principal
        self.coupon_rate = coupon_rate
        self.coupons_per_year = coupons_per_year
        self._cashflows = None

    def _generate_cashflows(self):
        """
        Returns the series of cash flows generated by a bond,
        indexed by the payment/coupon number
        """
        n_coupons = round(self.maturity * self.coupons_per_year)
        coupon_amt = self.principal * self.coupon_rate / self.coupons_per_year
        coupon_times = np.arange(1, n_coupons + 1)
        cash_flows = pd.Series(data=coupon_amt, index=coupon_times)
        cash_flows.iloc[-1] += self.principal  # add principal to last period
        self._cashflows = cash_flows
        return cash_flows

    def price(self, discount_rate: Union[float, pd.Series] = 0.03) -> float:
        """
        Computes the price of a bond that pays regular coupons until maturity
        at which time the principal and the final coupon is returned. Calculation is done via finding PV
        of the bonds

        :param discount_rate: The discount rate to discount the coupons back by. Can be either
        a single float or a pd.Series of discount rates for subsequent years. If a pd.Series is supplied,
        ensure that the index of series starts from 1 till number of years
        :type: Float, pd.Series, Optional, default value is 0.03.
        """
        if self._cashflows is None:
            self._generate_cashflows()
        # find present value of cash flows

        if isinstance(discount_rate, pd.Series):
            # to ensure that indexes match, duplicate each entry by number of
            # coupons per year
            if len(discount_rate) != self.maturity:
                raise ValueError("Lenght of discount rate series should be equal to number of years to maturity. \
              Expected {} but got {}".format(self.maturity, len(pd.Series)))

            # repeat the entries
            discount_rate = discount_rate.repeat(self.coupons_per_year)

        return pv(self._cashflows, discount_rate / self.coupons_per_year)

    def macaulay_duration(self, discount_rate: Union[float, pd.Series]):
        """
        Computes the Macaulay Duration of a sequence of cash flows, given a per-period discount rate
        """
        discounted_flows = _discount_table(
            self._cashflows.index, discount_rate) * self._cashflows
        discounted_flows_time_weighted = discounted_flows.index * \
            discounted_flows
        price_bond = discounted_flows.sum()
        return discounted_flows_time_weighted.sum() / price_bond
